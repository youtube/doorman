// Copyright 2016 Google, Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";
package doorman;

// NOTE(szopa): All times and time durations are expressed in seconds.

// Encapsulates a lease on capacity with a expiry_time in seconds
// since the epoch.
message Lease {
  int64 expiry_time = 1;
  int64 refresh_interval = 2;
  double capacity = 3;
}

// Encapsulates the information we need to send to get capacity for a
// single resource.
message ResourceRequest {
  string resource_id = 1;
  int64 priority = 2;
  Lease has = 3;
  double wants = 4;
}

// The GetCapacityRequest contains the identifier of the client making
// the request and a list of single resource capacity request protocol
// buffers.
message GetCapacityRequest {
  string client_id = 1;
  repeated ResourceRequest resource = 2;
}

// Contains the capacity allocated by the server for a single
// resource.
message ResourceResponse {
  string resource_id = 1;
  Lease gets = 2;
  double safe_capacity = 3;
}

// This message type is used when the server wants to convey the
// address of a master. If the the master_address field
// is not there that means that the server wants to tell us who
// the master is, but it doesn't know.
message Mastership {
  string master_address = 1;
}

// The response to a GetCapacity request is a list of protocol buffers
// specifying the capacity for a single resource.
// If the mastership field is there the server is telling us that it is
// not the master. The new master is in the mastership message, unless
// the server does not know who the master is, in which case the
// mastership field will be there, but the master_address field in it will
// be empty.
message GetCapacityResponse {
  repeated ResourceResponse response = 1;
  Mastership mastership = 2;
}

message PriorityBandAggregate {
  int64 priority = 1;
  int64 num_clients = 2;
  double wants = 3;
}

message ServerCapacityResourceRequest {
  string resource_id = 1;
  Lease has = 2;
  repeated PriorityBandAggregate wants = 3;
}

message GetServerCapacityRequest {
  string server_id = 1;
  repeated ServerCapacityResourceRequest resource = 2;
}

message ServerCapacityResourceResponse {
  string resource_id = 1;
  Lease gets = 2;
  Algorithm algorithm = 3;
  double safe_capacity = 4;
}

// The response to a GetServerCapacity request is a list of protocol buffers
// specifying the capacity for a single resource.
// If the mastership field is there the server is telling us that it is
// not the master. The new master is in the mastership message, unless
// the server does not know who the master is, in which case the
// mastership field will be there, but the master_address field in it will
// be empty.
message GetServerCapacityResponse {
  repeated ServerCapacityResourceResponse response = 1;
  Mastership mastership = 2;
}

// The ReleaseCapacity RPC instructs the server to release all leases
// that this client has on one or more resources. The lease is expected
// to expire as part of this RPC, so the client should not use the resource
// anymore.
message ReleaseCapacityRequest {
  string client_id = 1;
  repeated string resource_id = 2;
}

// A ReleaseCapacity RPC can only fail if the server we are talking to
// is not the master. In that case the mastership field indicates who
// the master is (if we know, if we don't know the mastership field will
// be there but the master_addres field inside mastership will
// not be there).
message ReleaseCapacityResponse {
  Mastership mastership = 1;
}

//
// Configuration
//

// NamedParameter encapsulates a name/value pair which is used to
// configure an Algorithm (see below).
message NamedParameter {
  string name = 1;
  string value = 2;
}

message Algorithm {
  enum Kind {
    NO_ALGORITHM = 0;
    STATIC = 1;
    PROPORTIONAL_SHARE = 2;
    FAIR_SHARE = 3;
  }

  Kind kind = 1;

  // How long should the lease be, in seconds.
  int64 lease_length = 2;

  // How many seconds should the client wait until refreshing its
  // lease.
  int64 refresh_interval = 3;

  repeated NamedParameter parameters = 4;

  // By default the learning mode duration is the lease length,
  // however if you want to live dangerously, and assume that
  // clients are living up to their responsibility to contact
  // the server every refresh_interval, you can specify a shorter
  // learning mode here. You can also specify a longer learning
  // mode duration (longer than the lease length), but then you
  // are a muppet (or you do not trust the clients, in which case
  // you need to fix the client implementation).
  int64 learning_mode_duration = 5;
}

// ResourceTemplate is used to instantiate the actual configuration
// for a resource based on a match with the identifier_glob glob.
message ResourceTemplate {
  // Glob used to match actual resources.
  string identifier_glob = 1;

  // Capacity in service units
  double capacity = 2;

  // Algorithm used to divide capacity between clients.
  Algorithm algorithm = 3;

  // Capacity to use in "safe" mode.
  // You can set this to a number and then the client will use that number
  // as the capacity in case it cannot refresh its lease.
  // If this field is absent the system returns a dynamic safe capacity in
  // the response, which is the available capacity divided by the number of
  // clients that the server knows about.
  double safe_capacity = 4;

  // Description of the resource.
  string description = 5;
}

// The resource configuration consists of a list of templates.
message ResourceRepository {
  // List of ResourceTemplates specifying available resources. Order
  // of elements in this list is significant: it will be used to match
  // incoming requests. A template for * should be the last element.
  repeated ResourceTemplate resources = 1;
}

// The request to obtain the master's address.
message DiscoveryRequest {
}

// The response containing the master's address.
message DiscoveryResponse {
  Mastership mastership = 1;
  bool is_master = 2;
}

service Capacity {
  // Used by clients to discover the master Doorman server.
  rpc Discovery (DiscoveryRequest) returns (DiscoveryResponse);

  // Used by clients to obtain capacity from Doorman.
  rpc GetCapacity (GetCapacityRequest) returns (GetCapacityResponse);

  // Used by Doorman servers to get capacity on behalf of their clients from
  // lower level Doorman servers.
  rpc GetServerCapacity (GetServerCapacityRequest) returns (GetServerCapacityResponse);

  // Used by clients to release any capacity they have for one or more
  // resources.
  rpc ReleaseCapacity (ReleaseCapacityRequest) returns (ReleaseCapacityResponse);
}
